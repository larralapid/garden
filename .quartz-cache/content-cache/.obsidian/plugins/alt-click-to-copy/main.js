/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AltClickToCopy
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var COPY_SUCCESS_MESSAGE = "Code copied";
var AltClickToCopy = class extends import_obsidian.Plugin {
  onload() {
    this.registerMarkdownPostProcessor((el, ctx) => this.processMarkdown(el, ctx));
  }
  processMarkdown(el, ctx) {
    const codeBlocks = el.querySelectorAll("code");
    codeBlocks.forEach((block) => {
      block.addEventListener("click", this.handleCodeBlockClick.bind(this));
    });
  }
  handleCodeBlockClick(event) {
    if (event.altKey) {
      const blockContent = event.target.textContent;
      navigator.clipboard.writeText(blockContent || "");
      new import_obsidian.Notice(COPY_SUCCESS_MESSAGE);
    }
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0LCBOb3RpY2UgfSBmcm9tICdvYnNpZGlhbic7XHJcblxyXG5jb25zdCBDT1BZX1NVQ0NFU1NfTUVTU0FHRSA9IFwiQ29kZSBjb3BpZWRcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFsdENsaWNrVG9Db3B5IGV4dGVuZHMgUGx1Z2luIHtcclxuXHRvbmxvYWQoKTogdm9pZCB7XHJcblx0XHR0aGlzLnJlZ2lzdGVyTWFya2Rvd25Qb3N0UHJvY2Vzc29yKChlbDogSFRNTEVsZW1lbnQsIGN0eDogTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dCkgPT4gdGhpcy5wcm9jZXNzTWFya2Rvd24oZWwsIGN0eCkpO1xyXG5cdH1cclxuXHJcblx0cHJvY2Vzc01hcmtkb3duKGVsOiBIVE1MRWxlbWVudCwgY3R4OiBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0KSB7XHJcblx0XHRjb25zdCBjb2RlQmxvY2tzID0gZWwucXVlcnlTZWxlY3RvckFsbCgnY29kZScpO1xyXG5cclxuXHJcblx0XHRjb2RlQmxvY2tzLmZvckVhY2goYmxvY2sgPT4ge1xyXG5cdFx0XHRibG9jay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlQ29kZUJsb2NrQ2xpY2suYmluZCh0aGlzKSk7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdGhhbmRsZUNvZGVCbG9ja0NsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcblx0XHRpZiAoZXZlbnQuYWx0S2V5KSB7XHJcblx0XHRcdGNvbnN0IGJsb2NrQ29udGVudCA9IChldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQpLnRleHRDb250ZW50O1xyXG5cdFx0XHRuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dChibG9ja0NvbnRlbnQgfHwgJycpO1xyXG5cdFx0XHRuZXcgTm90aWNlKENPUFlfU1VDQ0VTU19NRVNTQUdFKTtcclxuXHRcdH1cclxuXHR9XHJcbn0iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQTZEO0FBRTdELElBQU0sdUJBQXVCO0FBRTdCLElBQXFCLGlCQUFyQixjQUE0Qyx1QkFBTztBQUFBLEVBQ2xELFNBQWU7QUFDZCxTQUFLLDhCQUE4QixDQUFDLElBQWlCLFFBQXNDLEtBQUssZ0JBQWdCLElBQUksR0FBRyxDQUFDO0FBQUEsRUFDekg7QUFBQSxFQUVBLGdCQUFnQixJQUFpQixLQUFtQztBQUNuRSxVQUFNLGFBQWEsR0FBRyxpQkFBaUIsTUFBTTtBQUc3QyxlQUFXLFFBQVEsV0FBUztBQUMzQixZQUFNLGlCQUFpQixTQUFTLEtBQUsscUJBQXFCLEtBQUssSUFBSSxDQUFDO0FBQUEsSUFDckUsQ0FBQztBQUFBLEVBQ0Y7QUFBQSxFQUVBLHFCQUFxQixPQUFtQjtBQUN2QyxRQUFJLE1BQU0sUUFBUTtBQUNqQixZQUFNLGVBQWdCLE1BQU0sT0FBdUI7QUFDbkQsZ0JBQVUsVUFBVSxVQUFVLGdCQUFnQixFQUFFO0FBQ2hELFVBQUksdUJBQU8sb0JBQW9CO0FBQUEsSUFDaEM7QUFBQSxFQUNEO0FBQ0Q7IiwKICAibmFtZXMiOiBbXQp9Cg==
