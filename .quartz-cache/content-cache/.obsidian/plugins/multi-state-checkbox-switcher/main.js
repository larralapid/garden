/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MultiStateCheckBoxSwitcherPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/SettingsTab.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default",
  AdditionalStates: [
    { value: "!", isEnabled: true },
    { value: "?", isEnabled: true },
    { value: "i", isEnabled: true },
    { value: ">", isEnabled: true },
    { value: "<", isEnabled: true },
    { value: "f", isEnabled: true },
    { value: "I", isEnabled: true },
    { value: "k", isEnabled: true },
    { value: "u", isEnabled: true },
    { value: "q", isEnabled: true },
    { value: "", isEnabled: false },
    { value: "", isEnabled: false }
  ]
};
var SettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    const fragment = document.createDocumentFragment();
    const descriptionEl = containerEl.createEl("div");
    descriptionEl.createEl("p").append(
      "This plugin allows toggles 3 state intead of default two, it works nad looks perfectly when theme supports it eg. ",
      fragment.createEl("a", {
        href: "https://github.com/colineckert/obsidian-things",
        text: "Things"
      })
    );
    const primaryStatesDescEl = descriptionEl.createEl("div", {
      cls: "pattern-defaults"
    });
    primaryStatesDescEl.createEl("h3", { text: `Primary states` });
    const descriptionStatesEl = primaryStatesDescEl.createEl("ul");
    descriptionStatesEl.createEl("li").append('empty: "- [ ] " ');
    descriptionStatesEl.createEl("li").append('partial: "- [/] " ');
    descriptionStatesEl.createEl("li").append('checked: "- [x] " ');
    const additionalStatesDescEl = descriptionEl.createEl("div", {
      cls: "pattern-defaults"
    });
    additionalStatesDescEl.createEl("h3", { text: `Additional states` });
    additionalStatesDescEl.createEl("p").append(
      fragment.createEl("a", {
        href: "https://github.com/colineckert/obsidian-things/blob/main/assets/checkbox-styles.png",
        text: "Quick reference"
      })
    );
    this.plugin.settings.AdditionalStates.forEach((state, idx) => {
      new import_obsidian.Setting(containerEl).setName("Additional state #" + idx).addText(
        (text) => text.setPlaceholder("Enter single character").setValue(state.value).onChange(async (value) => {
          state.value = value;
          await this.plugin.saveSettings();
        })
      ).addToggle(
        (toggle) => toggle.setValue(state.isEnabled).onChange(async (value) => {
          state.isEnabled = value;
          await this.plugin.saveSettings();
        })
      );
    });
  }
};

// src/main.ts
var MultiStateCheckBoxSwitcherPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.validateSettings();
    this.addSettingTab(new SettingTab(this.app, this));
    this.addCommand({
      id: "toggle-three-state",
      name: "Toggle 3-state checkbox",
      editorCallback: (editor, view) => {
        const pattern = /- \[.\] /;
        let currentCursorPosition = editor.getCursor();
        const startSelectionLineNo = editor.getCursor("from");
        const endSelectionLineNo = editor.getCursor("to");
        for (let lineNo = startSelectionLineNo.line; lineNo <= endSelectionLineNo.line; lineNo++) {
          const currentLine = editor.getLine(lineNo);
          let newLine = currentLine;
          if (this.isLineAdditionalStateLine(currentLine)) {
            continue;
          }
          if (currentLine.startsWith("- [ ] ")) {
            newLine = currentLine.replace(pattern, "- [/] ");
          } else if (currentLine.startsWith("- [/] ")) {
            newLine = currentLine.replace(pattern, "- [x] ");
          } else if (currentLine.startsWith("- [x] ")) {
            newLine = currentLine.replace(pattern, "- [ ] ");
          } else {
            newLine = "- [ ] " + currentLine;
            currentCursorPosition = {
              ch: currentCursorPosition.ch + 6,
              line: lineNo
            };
          }
          editor.setLine(lineNo, newLine);
        }
        editor.setCursor(currentCursorPosition);
        editor.setSelection(startSelectionLineNo, endSelectionLineNo);
      }
    });
    this.addCommand({
      id: "toggle-additional-states",
      name: "Toggle Additional states",
      editorCallback: (editor, view) => {
        const pattern = /- \[.\] /;
        const allStates = this.settings.AdditionalStates;
        const currentCursorPosition = editor.getCursor();
        const startSelectionLineNo = editor.getCursor("from");
        const endSelectionLineNo = editor.getCursor("to");
        for (let lineNo = startSelectionLineNo.line; lineNo <= endSelectionLineNo.line; lineNo++) {
          const currentLine = editor.getLine(lineNo);
          let newLine = currentLine;
          let currentStateIdx = allStates.findIndex(
            (s) => currentLine.trimStart().startsWith(`- [${s.value}] `)
          );
          let nextState;
          do {
            currentStateIdx++;
            if (currentStateIdx >= allStates.length) {
              nextState = { value: " ", isEnabled: true };
            } else {
              nextState = allStates[currentStateIdx];
            }
          } while (!nextState.isEnabled);
          newLine = currentLine.replace(
            pattern,
            `- [${nextState.value}] `
          );
          editor.setLine(lineNo, newLine);
        }
        editor.setCursor(currentCursorPosition);
        editor.setSelection(startSelectionLineNo, endSelectionLineNo);
      }
    });
  }
  validateSettings() {
    this.settings.AdditionalStates.forEach((s) => {
      var _a, _b;
      if (s.isEnabled && ((_a = s.value) == null ? void 0 : _a.trim().length) < 1) {
        s.value = " ";
      }
      if (((_b = s.value) == null ? void 0 : _b.length) > 1) {
        s.value = s.value[0];
      }
    });
  }
  isLineAdditionalStateLine(currentLine) {
    const result = !!this.settings.AdditionalStates.find(
      (s) => s.value === currentLine[3]
    );
    return result;
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    this.validateSettings();
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
